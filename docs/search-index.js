var searchIndex = JSON.parse('{\
"hash_based_signatures":{"doc":"","t":[0,0,0,0,0,0,5,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,6,8,0,10,0,10,0,10,0,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,6,6,3,11,11,11,11,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5],"n":["cli","io","merkle_tree","signature","utils","wasm","keygen","sign","verify","hash_file","MerkleProof","MerkleTree","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","fmt","fmt","from","from","get_proof","get_root_hash","hash_chain","index","init","init","internal_node_hash","into","into","leaf_hash","ne","new","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","HashType","SignatureScheme","basic_lamport","public_key","q_indexed_signature","sign","stateless_merkle","verify","winternitz","BasicLamportKey","BasicLamportSignature","BasicLamportSignatureScheme","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","from","from","init","init","into","into","ne","new","public_key","serialize","sign","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","QIndexedSignature","QIndexedSignatureScheme","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","from","from","init","init","into","into","ne","new","one_time_signature","proof","public_key","serialize","sign","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","StatelessMerklePrivateKey","StatelessMerkleSignature","StatelessMerkleSignatureScheme","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","d","depth","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","eq","fmt","from","from","from","from_private_key","init","init","init","into","into","into","ne","new","private_key","public_key","public_key","seed_hex","serialize","serialize","sign","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","width","WinternitzKey","WinternitzSignature","WinternitzSignatureScheme","borrow","borrow_mut","clone","clone_into","d","deref","deref_mut","domination_free_function","drop","from","init","into","new","public_key","public_key_from_message_and_signature","sign","to_owned","try_from","try_into","type_id","verify","vzip","D","bits_c","bits_to_combine","borrow","borrow_mut","clone","clone_into","d","deref","deref_mut","drop","from","init","into","new","signature_and_key_size","to_owned","try_from","try_from","try_into","type_id","vzip","domination_free_function","bits_to_unsigned_int","bits_to_unsigned_ints","get_least_significant_bits","hash","hmac","slice_to_hash","string_to_hash","string_to_hash_maybe","alert","verify"],"q":["hash_based_signatures","","","","","","hash_based_signatures::cli","","","hash_based_signatures::io","hash_based_signatures::merkle_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hash_based_signatures::signature","","","","","","","","","hash_based_signatures::signature::basic_lamport","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hash_based_signatures::signature::q_indexed_signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hash_based_signatures::signature::stateless_merkle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hash_based_signatures::signature::winternitz","","","","","","","","","","","","","","","","","","","","","","","","","hash_based_signatures::signature::winternitz::d","","","","","","","","","","","","","","","","","","","","","","hash_based_signatures::signature::winternitz::domination_free_function","hash_based_signatures::utils","","","","","","","","hash_based_signatures::wasm",""],"d":["","","","","","","","","","","A proof that a given datum is at a given index. Note that …","A Merkle tree.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get a Merkle proof for a given index <code>i</code>.","Get the root hash of the tree.","Hash chain leading up to the root node","The index of the datum for which this is the proof.","","","Hash function applied to internal nodes of the Merkle tree","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Hash function applied to leaves of the Merkle tree","","Construct a new Merkle tree from a list of <code>elements</code>.","","","","","","","","","Verifies that the given root hash can be reconstructed …","","","","A generic trait that describes a signature scheme.","","Returns a copy of the public key","","Signs a message","","Verifies a signature. Note that this function does not …","","","","The basic Lamport one-time signature, as described in …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Generates a new one-time key pair from the given <code>seed</code> and …","","","Signs a message.","","","","","","","","","","","","The q-indexed signature scheme, as described in Section …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Builds a q-indexed signature scheme from the given <code>seed</code>.","Winternitz signature of the data being signed","Merkle proof used to verify that the used Winternitz …","","","Signs a message.","","","","","","","","","","","","","Stateless Merkle signatures, as described in Section 14.6.3","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Instantiates the new stateless Merkle signature scheme as …","","","","","","","","","","","","","","","","","","","","","","Private or Public key. The length depends on Winternitz …","Winternitz signature. The first element is Winternitz …","Winternitz signatures, as described in Section 14.3 in the …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Builds a Winternitz signature scheme from the given <code>seed</code>.","","Given a message and signature, computes the public key …","","","","","","","","Wrapper around the parameter “d” used for …","The number of bits of the “checksum” c","The number of bits that are combined into one integer value","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Wraps a value for <code>d</code>.","Size of the resulting Winternitz signature / key","","","","","","","A “domination-free function”, as described in section …","","","Gets the <code>bits</code> least significant bits of <code>index</code>, sorted from …","Hashes arbitrary bytes using SHA256","Computes the HMAC-SHA256 using the given key and data","Convert a <code>&amp;[u8]</code> to a [u8; 32]","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,11,12,11,12,11,11,11,12,11,12,12,11,12,12,11,12,11,12,11,11,12,12,11,12,0,11,12,0,12,11,12,11,11,12,11,12,11,12,12,11,12,0,0,0,36,0,36,0,36,0,0,0,0,20,19,20,19,19,19,20,19,20,19,20,20,19,20,20,19,20,19,20,19,20,19,19,20,19,19,20,19,20,19,20,19,19,20,19,0,0,22,23,22,23,22,22,22,23,22,23,23,22,23,23,22,23,22,23,22,23,23,22,23,23,22,23,22,22,22,23,22,23,22,23,22,22,23,0,0,0,27,25,26,27,25,26,25,25,27,25,26,27,25,26,25,26,27,25,26,26,26,27,25,26,27,27,25,26,27,25,26,26,27,27,27,25,25,25,26,27,27,25,26,27,25,26,27,25,26,27,27,25,26,25,0,0,0,28,28,28,28,0,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,[[1,1,2],3],[4,3],[[4,4,5],[[3,[6]]]],[7,[[3,[8]]]],0,0,[[]],[[]],[[]],[[]],[[[11,[[0,[9,10]]]]],[[11,[[0,[9,10]]]]]],[[]],[1],[1],[1],[1],[[],[[13,[[12,[10]]]]]],[1],[1],[[[12,[[0,[14,10]]]],12],6],[[[11,[[0,[10,15]]]],16],17],[[[12,[10]],16],17],[[]],[[]],[[[11,[[0,[10,15]]]],1],[[12,[[0,[10,15]]]]]],[[[11,[[0,[10,15]]]]]],0,0,[[],1],[[],1],[[]],[[]],[[]],[[]],[[[12,[[0,[14,10]]]],12],6],[[],[[11,[[0,[10,15]]]]]],[[[12,[10]]],13],[[]],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[[12,[10]],5],6],[[]],[[]],0,0,0,[[]],0,[[]],0,[[],6],0,0,0,0,[[]],[[]],[[]],[[]],[19,19],[[]],[1],[1],[1],[1],[[],[[13,[20]]]],[1],[1],[[20,20],6],[[]],[[]],[[],1],[[],1],[[]],[[]],[[20,20],6],[[],19],[19,21],[20,13],[[19,5],20],[[]],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[21,5,20],6],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[22,22],[[]],[1],[1],[1],[1],[[],[[13,[23]]]],[1],[1],[[23,23],6],[[]],[[]],[[],1],[[],1],[[]],[[]],[[23,23],6],[[1,24],22],0,0,[22,5],[23,13],[22,23],[[]],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[5,23],6],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1],[1],[1],[1],[1],[1],[[],[[13,[25]]]],[[],[[13,[26]]]],[1],[1],[1],[[26,26],6],[[26,16],17],[[]],[[]],[[]],[25,[[3,[27]]]],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[26,26],6],[[5,1,1,24],27],[27,25],[27,5],0,0,[25,13],[26,13],[[27,5],26],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[],18],[[5,5,26],6],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[28,28],[[]],0,[1],[1],0,[1],[[]],[[],1],[[]],[24,28],[28,29],[[5,30],[[3,[29]]]],[[28,5],30],[[]],[[],13],[[],13],[[],18],[[29,5,30],6],[[]],0,[24,1],[24,1],[[]],[[]],[24,24],[[]],0,[1],[1],[1],[[]],[[],1],[[]],[2,24],[24,1],[[]],[2,[[3,[24]]]],[[],13],[[],13],[[],18],[[]],[[5,24],[[32,[31]]]],[[],31],[[],[[32,[31]]]],[[1,1],[[32,[6]]]],[[],5],[5,5],[[],5],[33,5],[33,[[3,[5]]]],[33],[[34,34,33],35]],"p":[[15,"usize"],[15,"u64"],[6,"Result"],[3,"PathBuf"],[6,"HashType"],[15,"bool"],[3,"Path"],[3,"Digest"],[8,"Clone"],[8,"Serialize"],[3,"MerkleTree"],[3,"MerkleProof"],[4,"Result"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"TypeId"],[3,"BasicLamportSignatureScheme"],[3,"BasicLamportSignature"],[6,"BasicLamportKey"],[3,"QIndexedSignatureScheme"],[3,"QIndexedSignature"],[3,"D"],[3,"StatelessMerklePrivateKey"],[3,"StatelessMerkleSignature"],[3,"StatelessMerkleSignatureScheme"],[3,"WinternitzSignatureScheme"],[6,"WinternitzKey"],[6,"WinternitzSignature"],[15,"u8"],[3,"Vec"],[15,"str"],[3,"Uint8Array"],[3,"String"],[8,"SignatureScheme"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
